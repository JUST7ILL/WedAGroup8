import RPi.GPIO as GPIO
import time
import numpy as np

PIN_D0 = 16
PIN_D1 = 17
PIN_D2 = 22
PIN_D3 = 23
PIN_D4 = 24
PIN_D5 = 25
PIN_D6 = 26
PIN_D7 = 6
PIN_RS = 8
PIN_RW = 10
PIN_E = 11

def outputD(num):
	GPIO.output(PIN_D7, (num//128))
	GPIO.output(PIN_D6, (num%128//64))
	GPIO.output(PIN_D5, (num%64//32))
	GPIO.output(PIN_D4, (num%32//16))
	GPIO.output(PIN_D3, (num%16//8))
	GPIO.output(PIN_D2, (num%8//4))
	GPIO.output(PIN_D1, (num%4//2))
	GPIO.output(PIN_D0, (num%2))
	time.sleep(0.001)
	GPIO.output(PIN_E, True)
	time.sleep(0.001)
	GPIO.output(PIN_E, False)
	time.sleep(0.001)

def resetGDRAM():
	for i in range(64):
		for j in range(16):
			GPIO.output(PIN_RS, False)
			outputD(0x34)
			outputD(128+i%32)
			outputD(128+j)
			outputD(0x30)
			GPIO.output(PIN_RS, True)
			GPIO.output(PIN_D7, 0)
			GPIO.output(PIN_D6, 0)
			GPIO.output(PIN_D5, 0)
			GPIO.output(PIN_D4, 0)
			GPIO.output(PIN_D3, 0)
			GPIO.output(PIN_D2, 0)
			GPIO.output(PIN_D1, 0)
			GPIO.output(PIN_D0, 0)
			time.sleep(0.001)
			GPIO.output(PIN_E, True)
			time.sleep(0.001)
			GPIO.output(PIN_E, False)
			time.sleep(0.001)
			GPIO.output(PIN_D7, 0)
			GPIO.output(PIN_D6, 0)
			GPIO.output(PIN_D5, 0)
			GPIO.output(PIN_D4, 0)
			GPIO.output(PIN_D3, 0)
			GPIO.output(PIN_D2, 0)
			GPIO.output(PIN_D1, 0)
			GPIO.output(PIN_D0, 0)
			time.sleep(0.001)
			GPIO.output(PIN_E, True)
			time.sleep(0.001)
			GPIO.output(PIN_E, False)
			time.sleep(0.001)
		
	

def get_arrow(n):
	if n == 0:
		return np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
				[0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
				[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])
	elif n == 1:
		return np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])
	elif n == 2:
		return np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
						[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])
	elif n <= 4:
		ar = get_arrow(4-n)
		aw = np.zeros([32,32])
		for i in range(32):
			for j in range(32):
				aw[i][j] = ar[31-j][31-i]
		return aw
	elif n <= 8:
		ar = get_arrow(8-n)
		aw = np.zeros([32,32])
		for i in range(32):
			for j in range(32):
				aw[i][j] = ar[31-i][j]
		return aw
	elif n <= 15:
		ar = get_arrow(16-n)
		aw = np.zeros([32,32])
		for i in range(32):
			for j in range(32):
				aw[i][j] = ar[i][31-j]
		return aw
		

def draw_arrow(n):
	ar = get_arrow(n)
	for i in range(32):
		GPIO.output(PIN_RS, False)
		outputD(0x34)
		outputD(128+i)
		outputD(128+14)
		outputD(0x30)
		GPIO.output(PIN_RS, True)
		GPIO.output(PIN_D7, int(ar[i][0]))
		GPIO.output(PIN_D6, int(ar[i][1]))
		GPIO.output(PIN_D5, int(ar[i][2]))
		GPIO.output(PIN_D4, int(ar[i][3]))
		GPIO.output(PIN_D3, int(ar[i][4]))
		GPIO.output(PIN_D2, int(ar[i][5]))
		GPIO.output(PIN_D1, int(ar[i][6]))
		GPIO.output(PIN_D0, int(ar[i][7]))
		time.sleep(0.001)
		GPIO.output(PIN_E, True)
		time.sleep(0.001)
		GPIO.output(PIN_E, False)
		time.sleep(0.001)
		GPIO.output(PIN_D7, int(ar[i][8]))
		GPIO.output(PIN_D6, int(ar[i][9]))
		GPIO.output(PIN_D5, int(ar[i][10]))
		GPIO.output(PIN_D4, int(ar[i][11]))
		GPIO.output(PIN_D3, int(ar[i][12]))
		GPIO.output(PIN_D2, int(ar[i][13]))
		GPIO.output(PIN_D1, int(ar[i][14]))
		GPIO.output(PIN_D0, int(ar[i][15]))
		time.sleep(0.001)
		GPIO.output(PIN_E, True)
		time.sleep(0.001)
		GPIO.output(PIN_E, False)
		time.sleep(0.001)
		GPIO.output(PIN_D7, int(ar[i][16]))
		GPIO.output(PIN_D6, int(ar[i][17]))
		GPIO.output(PIN_D5, int(ar[i][18]))
		GPIO.output(PIN_D4, int(ar[i][19]))
		GPIO.output(PIN_D3, int(ar[i][20]))
		GPIO.output(PIN_D2, int(ar[i][21]))
		GPIO.output(PIN_D1, int(ar[i][22]))
		GPIO.output(PIN_D0, int(ar[i][23]))
		time.sleep(0.001)
		GPIO.output(PIN_E, True)
		time.sleep(0.001)
		GPIO.output(PIN_E, False)
		time.sleep(0.001)
		GPIO.output(PIN_D7, int(ar[i][24]))
		GPIO.output(PIN_D6, int(ar[i][25]))
		GPIO.output(PIN_D5, int(ar[i][26]))
		GPIO.output(PIN_D4, int(ar[i][27]))
		GPIO.output(PIN_D3, int(ar[i][28]))
		GPIO.output(PIN_D2, int(ar[i][29]))
		GPIO.output(PIN_D1, int(ar[i][30]))
		GPIO.output(PIN_D0, int(ar[i][31]))
		time.sleep(0.001)
		GPIO.output(PIN_E, True)
		time.sleep(0.001)
		GPIO.output(PIN_E, False)
		time.sleep(0.001)
	ClearAll()
	GPIO.output(PIN_RS, False)
	outputD(0x34)
	outputD(0x36)
	outputD(0x30)
	GPIO.output(PIN_RS, True)
			
def SetLine(n): # from 1 to 4
	lines = [0x80, 0x90, 0x88, 0x98]
	GPIO.output(PIN_RS, False)
	outputD(lines[n-1])
	
def ClearAll():
	GPIO.output(PIN_RS, False)
	outputD(1)
	time.sleep(0.05)
	

def WriteWords(data, line):
	half_count = 0
	line_length = 0 # for automatic line transfer
	GPIO.output(PIN_RS, True)
	for c in data:
		b = c.encode('big5')
		if len(b) == 1:
			half_count += 1
		else:
			if half_count % 2 == 1:
				outputD(32) # add space
				line_length += 1
			half_count = 0
		if line_length >= 16:
			line += 1
			SetLine(line)
			GPIO.output(PIN_RS, True)
			line_length = 0
		line_length += len(b)
		for i in b:
			outputD(i)
	if half_count % 2 == 1:
		outputD(32) # add space
		

# initialize
GPIO.setmode(GPIO.BCM)
GPIO.setup(PIN_D0, GPIO.OUT)
GPIO.setup(PIN_D1, GPIO.OUT)
GPIO.setup(PIN_D2, GPIO.OUT)
GPIO.setup(PIN_D3, GPIO.OUT)
GPIO.setup(PIN_D4, GPIO.OUT)
GPIO.setup(PIN_D5, GPIO.OUT)
GPIO.setup(PIN_D6, GPIO.OUT)
GPIO.setup(PIN_D7, GPIO.OUT)
GPIO.setup(PIN_RS, GPIO.OUT)
GPIO.setup(PIN_RW, GPIO.OUT)
GPIO.setup(PIN_E, GPIO.OUT)

GPIO.output(PIN_E, False)
GPIO.output(PIN_RW, False)
GPIO.output(PIN_RS, False) # command
time.sleep(0.05)
outputD(48)
outputD(48)
outputD(12)
outputD(1)
time.sleep(0.05)
outputD(6)
# end of init

#resetGDRAM()

for i in range(16):
	draw_arrow(i) # 0 to 15 clockwise from north
	WriteWords(u"檔案已儲存檔案已儲存(101)案案", 1) # can automatically change line
	time.sleep(1)
time.sleep(3)

#ClearAll()

GPIO.cleanup()







